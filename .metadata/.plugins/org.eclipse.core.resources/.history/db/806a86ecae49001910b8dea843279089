package com.yoke;

import java.awt.AWTException;
import java.awt.CheckboxMenuItem;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.TrayIcon;
import java.awt.TrayIcon.MessageType;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import javax.swing.ImageIcon;

public class Tray {
	// The single instance of the tray
	protected static Tray INSTANCE;
	
	/**
	 * Singleton method to get one instance of the Tray class
	 * @return The singleton Tray
	 */
	public static Tray getInstance() {
		if (INSTANCE == null) {
			INSTANCE = new Tray();
		}
		return INSTANCE;
	}
	

	// The tray icon
	protected TrayIcon trayIcon;

	// The menu item that says how many devices are connected
	protected MenuItem connectedDevices;
	
	/**
	 * Manages the tray menu of the program
	 */
	protected Tray() {
		// Check the SystemTray is supported
        if (!SystemTray.isSupported()) {
            System.out.println("SystemTray is not supported");
            return;
        }
        
        // Get the system tray
        final SystemTray tray = SystemTray.getSystemTray();
        
        // Create the image
        Image image = new ImageIcon(this.getClass().getResource("/logo.png"), "").getImage();
        
        // Create the actual tray icon and menu
        final PopupMenu popup = new PopupMenu();
        trayIcon = new TrayIcon(image);
        trayIcon.setPopupMenu(popup);
        trayIcon.setToolTip("Yoke");
        trayIcon.setImageAutoSize(true);

        // Show the created trayIcon
        try {
            tray.add(trayIcon);
        } catch (AWTException e) {
            System.out.println("TrayIcon could not be added.");
        }
        
       
        // Create a pop-up menu components
        MenuItem about = new MenuItem("About");
        connectedDevices = new MenuItem("");
        CheckboxMenuItem autoStartup = new CheckboxMenuItem("Auto Startup");
        MenuItem exit = new MenuItem("Exit");
       
        // Add pop-up components
        popup.add(connectedDevices);
        popup.addSeparator();
        popup.add(autoStartup);
        popup.addSeparator();
        popup.add(about);
        popup.add(exit);
        
        // Add interaction handlers
        exit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				System.exit(0);
			}
		});
   
	}
	
	/**
	 * Updates the number of connected devices in the menu
	 * @param deviceCount  The number of devices that are connected
	 */
	protected void updateConnectedDevices(int deviceCount) {
		connectedDevices.setLabel("Connected Devices: " + deviceCount);
	}

	
	// Store the last time task
	protected Timer messageTimeout;
	
	// Store the sent messages
	protected List<String> messageQueue = new ArrayList<String>();

	/**
	 * Shows a message in the tray, batches messages
	 * @param message  The content of the message
	 */
	public void showMessage(String message) {
		// Cancel any previous timeout
		if (messageTimeout != null) {
			messageTimeout.cancel();
		}
		
		// Create a timer
		messageTimeout = new Timer();
		
		// Create an message sending thread
		messageTimeout.schedule( 
	        new TimerTask() {
				public void run() {
					sendBatchMessages();
				}
			},
	        10
		);
		
		// Add the message to the queue
		messageQueue.add(message);
	}
	
	/**
	 * Shows all of the messages that were batched
	 */
	protected void sendBatchMessages() {
		// Cancel any previous timeout
		if (messageTimeout != null) {
			messageTimeout.cancel();
		}
				
		// Remove any timeout
		messageTimeout = null;
		
		// Combine the message
		String message = String.join("\n", messageQueue);
		
		// Reset the previous messages
		messageQueue = new ArrayList<String>();
		
		// Send all the message
		this.showMessage("Yoke:", message, MessageType.NONE);
	}
	
	/**
	 * Shows a message in the tray
	 * @param caption  The caption of the message
	 * @param message  The content of the message
	 */
	public void showMessage(String caption, String message) {
		this.showMessage(caption, message, MessageType.NONE);
	}

	/**
	 * Shows a message in the tray
	 * @param caption  The caption of the message
	 * @param message  The content of the message
	 * @param type  The type of the message
	 */
	public void showMessage(String caption, String message, MessageType type) {
		// Send any queued messages if present
		if (messageTimeout != null) {
			sendBatchMessages();
		}
		
		// Send the passed message
		trayIcon.displayMessage(caption, message, type);
	}
	
	
	protected boolean isAutoStartup() {
		return true;
	}
	protected void setAutoStartup(boolean autoStartup) {
		File startupFile = new File("C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\Yoke.jar");
		
		File yokeJarFile = new File(Tray.class.getProtectionDomain().getCodeSource().getLocation()
			    .toURI()).getPath();
	}
}
